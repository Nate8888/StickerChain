"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MirrorConsensusService_pb_service_1 = require("../../generated/MirrorConsensusService_pb_service");
const MirrorConsensusService_pb_1 = require("../../generated/MirrorConsensusService_pb");
const MirrorSubscriptionHandle_1 = require("../MirrorSubscriptionHandle");
const MirrorConsensusTopicResponse_1 = require("../MirrorConsensusTopicResponse");
const BaseMirrorConsensusTopicQuery_1 = require("../BaseMirrorConsensusTopicQuery");
class MirrorConsensusTopicQuery extends BaseMirrorConsensusTopicQuery_1.BaseMirrorConsensusTopicQuery {
    subscribe(client, listener, errorHandler) {
        this._validate();
        const response = client._client.makeServerStreamRequest(`/${MirrorConsensusService_pb_service_1.ConsensusService.serviceName}/${MirrorConsensusService_pb_service_1.ConsensusService.subscribeTopic.methodName}`, (req) => Buffer.from(req.serializeBinary()), MirrorConsensusService_pb_1.ConsensusTopicResponse.deserializeBinary, this._builder, null, null)
            .on("data", (message) => {
            listener(new MirrorConsensusTopicResponse_1.MirrorConsensusTopicResponse(message));
        })
            .on("status", (status) => {
            if (errorHandler != null) {
                errorHandler(new Error(`Received status code: ${status.code} and message: ${status.details}`));
            }
        })
            .on("end", (status) => {
            if (errorHandler != null && status != null) {
                errorHandler(new Error(`Received status code: ${status.code} and message: ${status.details}`));
            }
        });
        return new MirrorSubscriptionHandle_1.MirrorSubscriptionHandle(response.cancel);
    }
}
exports.MirrorConsensusTopicQuery = MirrorConsensusTopicQuery;
