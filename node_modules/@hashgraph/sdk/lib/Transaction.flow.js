/**
 * Flowtype definitions for Transaction
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import {
          Transaction as Transaction_
        } from './generated/Transaction_pb';
import {
          BaseClient,TransactionSigner
        } from './BaseClient';
import {
          TransactionResponse
        } from './generated/TransactionResponse_pb';
import {
          TransactionId
        } from './TransactionId';
import {
          TransactionReceipt
        } from './TransactionReceipt';
import {
          Ed25519PublicKey
        } from './crypto/Ed25519PublicKey';
import {
          Ed25519PrivateKey
        } from './crypto/Ed25519PrivateKey';
import {
          TransactionRecord
        } from './TransactionRecord';

/**
 * signature/public key pairs are passed around as objects
 */
export interface SignatureAndKey {
signature: Uint8Array,
publicKey: Ed25519PublicKey,
} 
/**
 * internal method to create a new transaction from its discrete parts
 */
declare export var transactionCreate: Symbol;
/**
 * execute the transaction directly and return the protobuf response
 */
declare export var transactionCall: Symbol;declare export class Transaction  {
constructor(): this;
static fromBytes(bytes: Uint8Array): Transaction;
/* NO PRINT IMPLEMENTED: GetAccessor */ any;
sign(privateKey: Ed25519PrivateKey): this;

/**
 * Given the transaction body bytes, asynchronously return a signature and associated public
 * key.
 * @param publicKey the public key that can be used to verify the returned signature
 * @param signer
 */
signWith(publicKey: Ed25519PublicKey, signer: TransactionSigner): Promise<this>;
[typeof transactionCall]: (client: BaseClient) => Promise<TransactionResponse>;
execute(client: BaseClient): Promise<TransactionId>;

/**
 * @deprecate `Transaction.getReceipt()` is deprecrated. Use `(await Transaction.execute()).getReceipt()` instead.
 */
getReceipt(client: BaseClient): Promise<TransactionReceipt>;

/**
 * @deprecate `Transaction.getRecord()` is deprecrated. Use `(await Transaction.execute()).getRecord()` instead.
 */
getRecord(client: BaseClient): Promise<TransactionRecord>;
_toProto(): Transaction_;
toBytes(): Uint8Array;
toString(): string;
}