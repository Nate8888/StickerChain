/**
 * Flowtype definitions for MirrorConsensusService_pb_service
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as MirrorConsensusService_pb from "./MirrorConsensusService_pb";
import { grpc } from "@improbable-eng/grpc-web";
declare type ConsensusServicesubscribeTopic = {
  +methodName: string,
  +service: typeof ConsensusService,
  +requestStream: false,
  +responseStream: true,
  +requestType: typeof MirrorConsensusService_pb.ConsensusTopicQuery,
  +responseType: typeof MirrorConsensusService_pb.ConsensusTopicResponse,
  ...
};
declare export class ConsensusService {
  static +serviceName: string;
  static +subscribeTopic: ConsensusServicesubscribeTopic;
}
export type ServiceError = {
  message: string,
  code: number,
  metadata: grpc.Metadata,
  ...
};
export type Status = {
  details: string,
  code: number,
  metadata: grpc.Metadata,
  ...
};
declare interface UnaryResponse {
  cancel(): void;
}
declare interface ResponseStream<T> {
  cancel(): void;
  on(type: "data", handler: (message: T) => void): ResponseStream<T>;
  on(type: "end", handler: (status?: Status) => void): ResponseStream<T>;
  on(type: "status", handler: (status: Status) => void): ResponseStream<T>;
}
declare interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: "end", handler: (status?: Status) => void): RequestStream<T>;
  on(type: "status", handler: (status: Status) => void): RequestStream<T>;
}
declare interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(
    type: "data",
    handler: (message: ResT) => void
  ): BidirectionalStream<ReqT, ResT>;
  on(
    type: "end",
    handler: (status?: Status) => void
  ): BidirectionalStream<ReqT, ResT>;
  on(
    type: "status",
    handler: (status: Status) => void
  ): BidirectionalStream<ReqT, ResT>;
}
declare export class ConsensusServiceClient {
  +serviceHost: string;
  constructor(serviceHost: string, options?: grpc.RpcOptions): this;
  subscribeTopic(
    requestMessage: MirrorConsensusService_pb.ConsensusTopicQuery,
    metadata?: grpc.Metadata
  ): ResponseStream<MirrorConsensusService_pb.ConsensusTopicResponse>;
}
