/**
 * Flowtype definitions for ConsensusGetTopicInfo_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as jspb from "google-protobuf";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
import * as ConsensusTopicDefinition_pb from "./ConsensusTopicDefinition_pb";
import * as ConsensusTopicInfo_pb from "./ConsensusTopicInfo_pb";
import * as ConsensusTopicState_pb from "./ConsensusTopicState_pb";
declare export class ConsensusGetTopicInfoQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasTopicid(): boolean;
  clearTopicid(): void;
  getTopicid(): BasicTypes_pb.TopicID | void;
  setTopicid(value?: BasicTypes_pb.TopicID): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusGetTopicInfoQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: ConsensusGetTopicInfoQuery
  ): ConsensusGetTopicInfoQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: ConsensusGetTopicInfoQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusGetTopicInfoQuery;
  static deserializeBinaryFromReader(
    message: ConsensusGetTopicInfoQuery,
    reader: jspb.BinaryReader
  ): ConsensusGetTopicInfoQuery;
}
export type ConsensusGetTopicInfoQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  topicid?: BasicTypes_pb.TopicID.AsObject,
  ...
};
declare export class ConsensusGetTopicInfoResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasTopicid(): boolean;
  clearTopicid(): void;
  getTopicid(): BasicTypes_pb.TopicID | void;
  setTopicid(value?: BasicTypes_pb.TopicID): void;
  hasTopicdefinition(): boolean;
  clearTopicdefinition(): void;
  getTopicdefinition(): ConsensusTopicDefinition_pb.ConsensusTopicDefinition | void;
  setTopicdefinition(
    value?: ConsensusTopicDefinition_pb.ConsensusTopicDefinition
  ): void;
  hasTopicstate(): boolean;
  clearTopicstate(): void;
  getTopicstate(): ConsensusTopicState_pb.ConsensusTopicState | void;
  setTopicstate(value?: ConsensusTopicState_pb.ConsensusTopicState): void;
  hasTopicinfo(): boolean;
  clearTopicinfo(): void;
  getTopicinfo(): ConsensusTopicInfo_pb.ConsensusTopicInfo | void;
  setTopicinfo(value?: ConsensusTopicInfo_pb.ConsensusTopicInfo): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusGetTopicInfoResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: ConsensusGetTopicInfoResponse
  ): ConsensusGetTopicInfoResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: ConsensusGetTopicInfoResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusGetTopicInfoResponse;
  static deserializeBinaryFromReader(
    message: ConsensusGetTopicInfoResponse,
    reader: jspb.BinaryReader
  ): ConsensusGetTopicInfoResponse;
}
export type ConsensusGetTopicInfoResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  topicid?: BasicTypes_pb.TopicID.AsObject,
  topicdefinition?: ConsensusTopicDefinition_pb.ConsensusTopicDefinition.AsObject,
  topicstate?: ConsensusTopicState_pb.ConsensusTopicState.AsObject,
  topicinfo?: ConsensusTopicInfo_pb.ConsensusTopicInfo.AsObject,
  ...
};
