/**
 * Flowtype definitions for FileGetContents_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as jspb from "google-protobuf";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
declare export class FileGetContentsQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasFileid(): boolean;
  clearFileid(): void;
  getFileid(): BasicTypes_pb.FileID | void;
  setFileid(value?: BasicTypes_pb.FileID): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FileGetContentsQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: FileGetContentsQuery
  ): FileGetContentsQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: FileGetContentsQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): FileGetContentsQuery;
  static deserializeBinaryFromReader(
    message: FileGetContentsQuery,
    reader: jspb.BinaryReader
  ): FileGetContentsQuery;
}
export type FileGetContentsQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  fileid?: BasicTypes_pb.FileID.AsObject,
  ...
};
declare export class FileGetContentsResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasFilecontents(): boolean;
  clearFilecontents(): void;
  getFilecontents(): FileGetContentsResponse$FileContents | void;
  setFilecontents(value?: FileGetContentsResponse$FileContents): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FileGetContentsResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: FileGetContentsResponse
  ): FileGetContentsResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: FileGetContentsResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): FileGetContentsResponse;
  static deserializeBinaryFromReader(
    message: FileGetContentsResponse,
    reader: jspb.BinaryReader
  ): FileGetContentsResponse;
}
declare var FileGetContentsResponse: typeof npm$namespace$FileGetContentsResponse;

declare var npm$namespace$FileGetContentsResponse: {|
  FileContents: typeof FileGetContentsResponse$FileContents
|};
export type FileGetContentsResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  filecontents?: FileGetContentsResponse$FileContents$AsObject,
  ...
};

declare export class FileGetContentsResponse$FileContents mixins jspb.Message {
  hasFileid(): boolean;
  clearFileid(): void;
  getFileid(): BasicTypes_pb.FileID | void;
  setFileid(value?: BasicTypes_pb.FileID): void;
  getContents(): Uint8Array | string;
  getContents_asU8(): Uint8Array;
  getContents_asB64(): string;
  setContents(value: Uint8Array | string): void;
  serializeBinary(): Uint8Array;
  toObject(
    includeInstance?: boolean
  ): FileGetContentsResponse$FileContents$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: FileGetContentsResponse$FileContents
  ): FileGetContentsResponse$FileContents$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: FileGetContentsResponse$FileContents,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(
    bytes: Uint8Array
  ): FileGetContentsResponse$FileContents;
  static deserializeBinaryFromReader(
    message: FileGetContentsResponse$FileContents,
    reader: jspb.BinaryReader
  ): FileGetContentsResponse$FileContents;
}

export type FileGetContentsResponse$FileContents$AsObject = {
  fileid?: BasicTypes_pb.FileID.AsObject,
  contents: Uint8Array | string,
  ...
};
