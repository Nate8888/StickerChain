/**
 * Flowtype definitions for TransactionRecord_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as jspb from "google-protobuf";
import * as Timestamp_pb from "./Timestamp_pb";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as TransactionReceipt_pb from "./TransactionReceipt_pb";
import * as CryptoTransfer_pb from "./CryptoTransfer_pb";
import * as ContractCallLocal_pb from "./ContractCallLocal_pb";
declare export class TransactionRecord mixins jspb.Message {
  hasReceipt(): boolean;
  clearReceipt(): void;
  getReceipt(): TransactionReceipt_pb.TransactionReceipt | void;
  setReceipt(value?: TransactionReceipt_pb.TransactionReceipt): void;
  getTransactionhash(): Uint8Array | string;
  getTransactionhash_asU8(): Uint8Array;
  getTransactionhash_asB64(): string;
  setTransactionhash(value: Uint8Array | string): void;
  hasConsensustimestamp(): boolean;
  clearConsensustimestamp(): void;
  getConsensustimestamp(): Timestamp_pb.Timestamp | void;
  setConsensustimestamp(value?: Timestamp_pb.Timestamp): void;
  hasTransactionid(): boolean;
  clearTransactionid(): void;
  getTransactionid(): BasicTypes_pb.TransactionID | void;
  setTransactionid(value?: BasicTypes_pb.TransactionID): void;
  getMemo(): string;
  setMemo(value: string): void;
  getTransactionfee(): number;
  setTransactionfee(value: number): void;
  hasContractcallresult(): boolean;
  clearContractcallresult(): void;
  getContractcallresult(): ContractCallLocal_pb.ContractFunctionResult | void;
  setContractcallresult(
    value?: ContractCallLocal_pb.ContractFunctionResult
  ): void;
  hasContractcreateresult(): boolean;
  clearContractcreateresult(): void;
  getContractcreateresult(): ContractCallLocal_pb.ContractFunctionResult | void;
  setContractcreateresult(
    value?: ContractCallLocal_pb.ContractFunctionResult
  ): void;
  hasTransferlist(): boolean;
  clearTransferlist(): void;
  getTransferlist(): CryptoTransfer_pb.TransferList | void;
  setTransferlist(value?: CryptoTransfer_pb.TransferList): void;
  getBodyCase(): $Values<typeof TransactionRecord$BodyCase>;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TransactionRecord$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: TransactionRecord
  ): TransactionRecord$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: TransactionRecord,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): TransactionRecord;
  static deserializeBinaryFromReader(
    message: TransactionRecord,
    reader: jspb.BinaryReader
  ): TransactionRecord;
}
declare var TransactionRecord: typeof npm$namespace$TransactionRecord;

declare var npm$namespace$TransactionRecord: {|
  BodyCase: typeof TransactionRecord$BodyCase
|};
export type TransactionRecord$AsObject = {
  receipt?: TransactionReceipt_pb.TransactionReceipt.AsObject,
  transactionhash: Uint8Array | string,
  consensustimestamp?: Timestamp_pb.Timestamp.AsObject,
  transactionid?: BasicTypes_pb.TransactionID.AsObject,
  memo: string,
  transactionfee: number,
  contractcallresult?: ContractCallLocal_pb.ContractFunctionResult.AsObject,
  contractcreateresult?: ContractCallLocal_pb.ContractFunctionResult.AsObject,
  transferlist?: CryptoTransfer_pb.TransferList.AsObject,
  ...
};

declare export var TransactionRecord$BodyCase: {|
  +BODY_NOT_SET: 0, // 0
  +CONTRACTCALLRESULT: 7, // 7
  +CONTRACTCREATERESULT: 8 // 8
|};
