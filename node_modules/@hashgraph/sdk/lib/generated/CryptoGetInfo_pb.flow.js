/**
 * Flowtype definitions for CryptoGetInfo_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as jspb from "google-protobuf";
import * as Timestamp_pb from "./Timestamp_pb";
import * as Duration_pb from "./Duration_pb";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
import * as CryptoAddClaim_pb from "./CryptoAddClaim_pb";
declare export class CryptoGetInfoQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasAccountid(): boolean;
  clearAccountid(): void;
  getAccountid(): BasicTypes_pb.AccountID | void;
  setAccountid(value?: BasicTypes_pb.AccountID): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoGetInfoQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoGetInfoQuery
  ): CryptoGetInfoQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoGetInfoQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CryptoGetInfoQuery;
  static deserializeBinaryFromReader(
    message: CryptoGetInfoQuery,
    reader: jspb.BinaryReader
  ): CryptoGetInfoQuery;
}
export type CryptoGetInfoQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  accountid?: BasicTypes_pb.AccountID.AsObject,
  ...
};
declare export class CryptoGetInfoResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasAccountinfo(): boolean;
  clearAccountinfo(): void;
  getAccountinfo(): CryptoGetInfoResponse$AccountInfo | void;
  setAccountinfo(value?: CryptoGetInfoResponse$AccountInfo): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CryptoGetInfoResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoGetInfoResponse
  ): CryptoGetInfoResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoGetInfoResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): CryptoGetInfoResponse;
  static deserializeBinaryFromReader(
    message: CryptoGetInfoResponse,
    reader: jspb.BinaryReader
  ): CryptoGetInfoResponse;
}
declare var CryptoGetInfoResponse: typeof npm$namespace$CryptoGetInfoResponse;

declare var npm$namespace$CryptoGetInfoResponse: {|
  AccountInfo: typeof CryptoGetInfoResponse$AccountInfo
|};
export type CryptoGetInfoResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  accountinfo?: CryptoGetInfoResponse$AccountInfo$AsObject,
  ...
};

declare export class CryptoGetInfoResponse$AccountInfo mixins jspb.Message {
  hasAccountid(): boolean;
  clearAccountid(): void;
  getAccountid(): BasicTypes_pb.AccountID | void;
  setAccountid(value?: BasicTypes_pb.AccountID): void;
  getContractaccountid(): string;
  setContractaccountid(value: string): void;
  getDeleted(): boolean;
  setDeleted(value: boolean): void;
  hasProxyaccountid(): boolean;
  clearProxyaccountid(): void;
  getProxyaccountid(): BasicTypes_pb.AccountID | void;
  setProxyaccountid(value?: BasicTypes_pb.AccountID): void;
  getProxyreceived(): string;
  setProxyreceived(value: string): void;
  hasKey(): boolean;
  clearKey(): void;
  getKey(): BasicTypes_pb.Key | void;
  setKey(value?: BasicTypes_pb.Key): void;
  getBalance(): string;
  setBalance(value: string): void;
  getGeneratesendrecordthreshold(): string;
  setGeneratesendrecordthreshold(value: string): void;
  getGeneratereceiverecordthreshold(): string;
  setGeneratereceiverecordthreshold(value: string): void;
  getReceiversigrequired(): boolean;
  setReceiversigrequired(value: boolean): void;
  hasExpirationtime(): boolean;
  clearExpirationtime(): void;
  getExpirationtime(): Timestamp_pb.Timestamp | void;
  setExpirationtime(value?: Timestamp_pb.Timestamp): void;
  hasAutorenewperiod(): boolean;
  clearAutorenewperiod(): void;
  getAutorenewperiod(): Duration_pb.Duration | void;
  setAutorenewperiod(value?: Duration_pb.Duration): void;
  clearClaimsList(): void;
  getClaimsList(): Array<CryptoAddClaim_pb.Claim>;
  setClaimsList(value: Array<CryptoAddClaim_pb.Claim>): void;
  addClaims(
    value?: CryptoAddClaim_pb.Claim,
    index?: number
  ): CryptoAddClaim_pb.Claim;
  serializeBinary(): Uint8Array;
  toObject(
    includeInstance?: boolean
  ): CryptoGetInfoResponse$AccountInfo$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: CryptoGetInfoResponse$AccountInfo
  ): CryptoGetInfoResponse$AccountInfo$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: CryptoGetInfoResponse$AccountInfo,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(
    bytes: Uint8Array
  ): CryptoGetInfoResponse$AccountInfo;
  static deserializeBinaryFromReader(
    message: CryptoGetInfoResponse$AccountInfo,
    reader: jspb.BinaryReader
  ): CryptoGetInfoResponse$AccountInfo;
}

export type CryptoGetInfoResponse$AccountInfo$AsObject = {
  accountid?: BasicTypes_pb.AccountID.AsObject,
  contractaccountid: string,
  deleted: boolean,
  proxyaccountid?: BasicTypes_pb.AccountID.AsObject,
  proxyreceived: string,
  key?: BasicTypes_pb.Key.AsObject,
  balance: string,
  generatesendrecordthreshold: string,
  generatereceiverecordthreshold: string,
  receiversigrequired: boolean,
  expirationtime?: Timestamp_pb.Timestamp.AsObject,
  autorenewperiod?: Duration_pb.Duration.AsObject,
  claimsList: Array<CryptoAddClaim_pb.Claim.AsObject>,
  ...
};
