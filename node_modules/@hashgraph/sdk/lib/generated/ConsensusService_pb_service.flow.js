/**
 * Flowtype definitions for ConsensusService_pb_service
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as ConsensusService_pb from "./ConsensusService_pb";
import * as Query_pb from "./Query_pb";
import * as Response_pb from "./Response_pb";
import * as TransactionResponse_pb from "./TransactionResponse_pb";
import * as Transaction_pb from "./Transaction_pb";
import { grpc } from "@improbable-eng/grpc-web";
declare type ConsensusServicecreateTopic = {
  +methodName: string,
  +service: typeof ConsensusService,
  +requestStream: false,
  +responseStream: false,
  +requestType: typeof Transaction_pb.Transaction,
  +responseType: typeof TransactionResponse_pb.TransactionResponse,
  ...
};
declare type ConsensusServiceupdateTopic = {
  +methodName: string,
  +service: typeof ConsensusService,
  +requestStream: false,
  +responseStream: false,
  +requestType: typeof Transaction_pb.Transaction,
  +responseType: typeof TransactionResponse_pb.TransactionResponse,
  ...
};
declare type ConsensusServicedeleteTopic = {
  +methodName: string,
  +service: typeof ConsensusService,
  +requestStream: false,
  +responseStream: false,
  +requestType: typeof Transaction_pb.Transaction,
  +responseType: typeof TransactionResponse_pb.TransactionResponse,
  ...
};
declare type ConsensusServicegetTopicInfo = {
  +methodName: string,
  +service: typeof ConsensusService,
  +requestStream: false,
  +responseStream: false,
  +requestType: typeof Query_pb.Query,
  +responseType: typeof Response_pb.Response,
  ...
};
declare type ConsensusServicesubmitMessage = {
  +methodName: string,
  +service: typeof ConsensusService,
  +requestStream: false,
  +responseStream: false,
  +requestType: typeof Transaction_pb.Transaction,
  +responseType: typeof TransactionResponse_pb.TransactionResponse,
  ...
};
declare export class ConsensusService {
  static +serviceName: string;
  static +createTopic: ConsensusServicecreateTopic;
  static +updateTopic: ConsensusServiceupdateTopic;
  static +deleteTopic: ConsensusServicedeleteTopic;
  static +getTopicInfo: ConsensusServicegetTopicInfo;
  static +submitMessage: ConsensusServicesubmitMessage;
}
export type ServiceError = {
  message: string,
  code: number,
  metadata: grpc.Metadata,
  ...
};
export type Status = {
  details: string,
  code: number,
  metadata: grpc.Metadata,
  ...
};
declare interface UnaryResponse {
  cancel(): void;
}
declare interface ResponseStream<T> {
  cancel(): void;
  on(type: "data", handler: (message: T) => void): ResponseStream<T>;
  on(type: "end", handler: (status?: Status) => void): ResponseStream<T>;
  on(type: "status", handler: (status: Status) => void): ResponseStream<T>;
}
declare interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: "end", handler: (status?: Status) => void): RequestStream<T>;
  on(type: "status", handler: (status: Status) => void): RequestStream<T>;
}
declare interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(
    type: "data",
    handler: (message: ResT) => void
  ): BidirectionalStream<ReqT, ResT>;
  on(
    type: "end",
    handler: (status?: Status) => void
  ): BidirectionalStream<ReqT, ResT>;
  on(
    type: "status",
    handler: (status: Status) => void
  ): BidirectionalStream<ReqT, ResT>;
}
declare export class ConsensusServiceClient {
  +serviceHost: string;
  constructor(serviceHost: string, options?: grpc.RpcOptions): this;
  createTopic(
    requestMessage: Transaction_pb.Transaction,
    metadata: grpc.Metadata,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
  createTopic(
    requestMessage: Transaction_pb.Transaction,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
  updateTopic(
    requestMessage: Transaction_pb.Transaction,
    metadata: grpc.Metadata,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
  updateTopic(
    requestMessage: Transaction_pb.Transaction,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
  deleteTopic(
    requestMessage: Transaction_pb.Transaction,
    metadata: grpc.Metadata,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
  deleteTopic(
    requestMessage: Transaction_pb.Transaction,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
  getTopicInfo(
    requestMessage: Query_pb.Query,
    metadata: grpc.Metadata,
    callback: (
      error: ServiceError | null,
      responseMessage: Response_pb.Response | null
    ) => void
  ): UnaryResponse;
  getTopicInfo(
    requestMessage: Query_pb.Query,
    callback: (
      error: ServiceError | null,
      responseMessage: Response_pb.Response | null
    ) => void
  ): UnaryResponse;
  submitMessage(
    requestMessage: Transaction_pb.Transaction,
    metadata: grpc.Metadata,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
  submitMessage(
    requestMessage: Transaction_pb.Transaction,
    callback: (
      error: ServiceError | null,
      responseMessage: TransactionResponse_pb.TransactionResponse | null
    ) => void
  ): UnaryResponse;
}
