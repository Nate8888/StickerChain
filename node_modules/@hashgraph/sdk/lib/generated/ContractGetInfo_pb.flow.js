/**
 * Flowtype definitions for ContractGetInfo_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as jspb from "google-protobuf";
import * as Timestamp_pb from "./Timestamp_pb";
import * as Duration_pb from "./Duration_pb";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
declare export class ContractGetInfoQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasContractid(): boolean;
  clearContractid(): void;
  getContractid(): BasicTypes_pb.ContractID | void;
  setContractid(value?: BasicTypes_pb.ContractID): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ContractGetInfoQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: ContractGetInfoQuery
  ): ContractGetInfoQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: ContractGetInfoQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): ContractGetInfoQuery;
  static deserializeBinaryFromReader(
    message: ContractGetInfoQuery,
    reader: jspb.BinaryReader
  ): ContractGetInfoQuery;
}
export type ContractGetInfoQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  contractid?: BasicTypes_pb.ContractID.AsObject,
  ...
};
declare export class ContractGetInfoResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasContractinfo(): boolean;
  clearContractinfo(): void;
  getContractinfo(): ContractGetInfoResponse$ContractInfo | void;
  setContractinfo(value?: ContractGetInfoResponse$ContractInfo): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ContractGetInfoResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: ContractGetInfoResponse
  ): ContractGetInfoResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: ContractGetInfoResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): ContractGetInfoResponse;
  static deserializeBinaryFromReader(
    message: ContractGetInfoResponse,
    reader: jspb.BinaryReader
  ): ContractGetInfoResponse;
}
declare var ContractGetInfoResponse: typeof npm$namespace$ContractGetInfoResponse;

declare var npm$namespace$ContractGetInfoResponse: {|
  ContractInfo: typeof ContractGetInfoResponse$ContractInfo
|};
export type ContractGetInfoResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  contractinfo?: ContractGetInfoResponse$ContractInfo$AsObject,
  ...
};

declare export class ContractGetInfoResponse$ContractInfo mixins jspb.Message {
  hasContractid(): boolean;
  clearContractid(): void;
  getContractid(): BasicTypes_pb.ContractID | void;
  setContractid(value?: BasicTypes_pb.ContractID): void;
  hasAccountid(): boolean;
  clearAccountid(): void;
  getAccountid(): BasicTypes_pb.AccountID | void;
  setAccountid(value?: BasicTypes_pb.AccountID): void;
  getContractaccountid(): string;
  setContractaccountid(value: string): void;
  hasAdminkey(): boolean;
  clearAdminkey(): void;
  getAdminkey(): BasicTypes_pb.Key | void;
  setAdminkey(value?: BasicTypes_pb.Key): void;
  hasExpirationtime(): boolean;
  clearExpirationtime(): void;
  getExpirationtime(): Timestamp_pb.Timestamp | void;
  setExpirationtime(value?: Timestamp_pb.Timestamp): void;
  hasAutorenewperiod(): boolean;
  clearAutorenewperiod(): void;
  getAutorenewperiod(): Duration_pb.Duration | void;
  setAutorenewperiod(value?: Duration_pb.Duration): void;
  getStorage(): number;
  setStorage(value: number): void;
  getMemo(): string;
  setMemo(value: string): void;
  serializeBinary(): Uint8Array;
  toObject(
    includeInstance?: boolean
  ): ContractGetInfoResponse$ContractInfo$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: ContractGetInfoResponse$ContractInfo
  ): ContractGetInfoResponse$ContractInfo$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: ContractGetInfoResponse$ContractInfo,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(
    bytes: Uint8Array
  ): ContractGetInfoResponse$ContractInfo;
  static deserializeBinaryFromReader(
    message: ContractGetInfoResponse$ContractInfo,
    reader: jspb.BinaryReader
  ): ContractGetInfoResponse$ContractInfo;
}

export type ContractGetInfoResponse$ContractInfo$AsObject = {
  contractid?: BasicTypes_pb.ContractID.AsObject,
  accountid?: BasicTypes_pb.AccountID.AsObject,
  contractaccountid: string,
  adminkey?: BasicTypes_pb.Key.AsObject,
  expirationtime?: Timestamp_pb.Timestamp.AsObject,
  autorenewperiod?: Duration_pb.Duration.AsObject,
  storage: number,
  memo: string,
  ...
};
