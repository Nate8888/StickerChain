/**
 * Flowtype definitions for FileGetInfo_pb
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as jspb from "google-protobuf";
import * as Timestamp_pb from "./Timestamp_pb";
import * as BasicTypes_pb from "./BasicTypes_pb";
import * as QueryHeader_pb from "./QueryHeader_pb";
import * as ResponseHeader_pb from "./ResponseHeader_pb";
declare export class FileGetInfoQuery mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): QueryHeader_pb.QueryHeader | void;
  setHeader(value?: QueryHeader_pb.QueryHeader): void;
  hasFileid(): boolean;
  clearFileid(): void;
  getFileid(): BasicTypes_pb.FileID | void;
  setFileid(value?: BasicTypes_pb.FileID): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FileGetInfoQuery$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: FileGetInfoQuery
  ): FileGetInfoQuery$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: FileGetInfoQuery,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): FileGetInfoQuery;
  static deserializeBinaryFromReader(
    message: FileGetInfoQuery,
    reader: jspb.BinaryReader
  ): FileGetInfoQuery;
}
export type FileGetInfoQuery$AsObject = {
  header?: QueryHeader_pb.QueryHeader.AsObject,
  fileid?: BasicTypes_pb.FileID.AsObject,
  ...
};
declare export class FileGetInfoResponse mixins jspb.Message {
  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): ResponseHeader_pb.ResponseHeader | void;
  setHeader(value?: ResponseHeader_pb.ResponseHeader): void;
  hasFileinfo(): boolean;
  clearFileinfo(): void;
  getFileinfo(): FileGetInfoResponse$FileInfo | void;
  setFileinfo(value?: FileGetInfoResponse$FileInfo): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FileGetInfoResponse$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: FileGetInfoResponse
  ): FileGetInfoResponse$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: FileGetInfoResponse,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): FileGetInfoResponse;
  static deserializeBinaryFromReader(
    message: FileGetInfoResponse,
    reader: jspb.BinaryReader
  ): FileGetInfoResponse;
}
declare var FileGetInfoResponse: typeof npm$namespace$FileGetInfoResponse;

declare var npm$namespace$FileGetInfoResponse: {|
  FileInfo: typeof FileGetInfoResponse$FileInfo
|};
export type FileGetInfoResponse$AsObject = {
  header?: ResponseHeader_pb.ResponseHeader.AsObject,
  fileinfo?: FileGetInfoResponse$FileInfo$AsObject,
  ...
};

declare export class FileGetInfoResponse$FileInfo mixins jspb.Message {
  hasFileid(): boolean;
  clearFileid(): void;
  getFileid(): BasicTypes_pb.FileID | void;
  setFileid(value?: BasicTypes_pb.FileID): void;
  getSize(): number;
  setSize(value: number): void;
  hasExpirationtime(): boolean;
  clearExpirationtime(): void;
  getExpirationtime(): Timestamp_pb.Timestamp | void;
  setExpirationtime(value?: Timestamp_pb.Timestamp): void;
  getDeleted(): boolean;
  setDeleted(value: boolean): void;
  hasKeys(): boolean;
  clearKeys(): void;
  getKeys(): BasicTypes_pb.KeyList | void;
  setKeys(value?: BasicTypes_pb.KeyList): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FileGetInfoResponse$FileInfo$AsObject;
  static toObject(
    includeInstance: boolean,
    msg: FileGetInfoResponse$FileInfo
  ): FileGetInfoResponse$FileInfo$AsObject;
  static extensions: {
    [key: number]: jspb.ExtensionFieldInfo<jspb.Message>,
    ...
  };
  static extensionsBinary: {
    [key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>,
    ...
  };
  static serializeBinaryToWriter(
    message: FileGetInfoResponse$FileInfo,
    writer: jspb.BinaryWriter
  ): void;
  static deserializeBinary(bytes: Uint8Array): FileGetInfoResponse$FileInfo;
  static deserializeBinaryFromReader(
    message: FileGetInfoResponse$FileInfo,
    reader: jspb.BinaryReader
  ): FileGetInfoResponse$FileInfo;
}

export type FileGetInfoResponse$FileInfo$AsObject = {
  fileid?: BasicTypes_pb.FileID.AsObject,
  size: number,
  expirationtime?: Timestamp_pb.Timestamp.AsObject,
  deleted: boolean,
  keys?: BasicTypes_pb.KeyList.AsObject,
  ...
};
