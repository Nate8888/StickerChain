/**
 * Flowtype definitions for util
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import { KeyList } from "./generated/BasicTypes_pb";
import { Duration } from "./generated/Duration_pb";
import { ResponseHeader } from "./generated/ResponseHeader_pb";
import { Response } from "./generated/Response_pb";
import { Ed25519PublicKey } from "./crypto/Ed25519PublicKey";
declare export function orThrow<T>(val?: T, msg?: string): T;
declare export function newDuration(seconds: number): Duration;
declare type EntityKind = "account" | "contract" | "file" | "topic";
declare type EntityId<Kind: EntityKind> =
  | ({
      shard?: number,
      realm?: number,
      ...
    } & { [key: Kind]: number, ... })
  | string
  | number;
declare type NormalizedId<Kind: EntityKind> = {
  [key: "shard" | "realm" | Kind]: number,
  ...
};
declare export function normalizeEntityId<Kind: EntityKind>(
  kind: Kind,
  entityId: EntityId<Kind>
): NormalizedId<Kind>;
declare export function getSdkKeys(keylist: KeyList): Ed25519PublicKey[];
declare export function setTimeoutAwaitable(timeoutMs: number): Promise<null>;
declare export function timeoutPromise<T>(
  ms: number,
  promise: Promise<T>,
  timedOutCallback: (reject: (reason: Error) => void) => void
): Promise<T>;
export interface GetHeader {
  getHeader(): ResponseHeader | void;
}
declare export function reqDefined<T>(val: T | void, msg: string): T;
declare export function runValidation(
  instance: { [key: string]: any },
  doValidate: (errors: string[]) => void
): void;
declare export function getResponseHeader(response: Response): ResponseHeader;
declare export {};
