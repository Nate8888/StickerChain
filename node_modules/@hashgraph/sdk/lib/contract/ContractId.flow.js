/**
 * Flowtype definitions for ContractId
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import { ContractID, Key } from "../generated/BasicTypes_pb";
import { PublicKey } from "../crypto/PublicKey";

/**
 * Normalized contract ID returned by various methods in the SDK.
 */
declare export class ContractId mixins PublicKey {
  shard: number;
  realm: number;
  contract: number;
  constructor(shard: number, realm: number, contract: number): this;
  constructor(contractId: ContractIdLike): this;
  static fromString(id: string): ContractId;
  static _fromProto(contractId: ContractID): ContractId;
  toString(): string;
  static fromSolidityAddress(address: string): ContractId;
  toSolidityAddress(): string;
  _toProto(): ContractID;
  _toProtoKey(): Key;
}
/**
 * Input type for an ID of a contract on the network.
 *
 * In any form, `shard` and `realm` are assumed to be 0 if not provided.
 *
 * Strings may take the form `'<shard>.<realm>.<contract>'` or `'<contract>'`.
 *
 * A bare `number` will be taken as the contract number with shard and realm of 0.
 */
export type ContractIdLike =
  | {
      shard?: number,
      realm?: number,
      contract: number,
      ...
    }
  | string
  | number
  | ContractId;
