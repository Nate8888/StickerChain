/**
 * Flowtype definitions for QueryBuilder
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import { BaseClient, Node } from "./BaseClient";
import { QueryHeader } from "./generated/QueryHeader_pb";
import { Query } from "./generated/Query_pb";
import { Response } from "./generated/Response_pb";
import { grpc } from "@improbable-eng/grpc-web";
import { Hbar, Tinybar } from "./Hbar";
import { ResponseHeader } from "./generated/ResponseHeader_pb";
import { Status } from "./Status";
declare export class QueryBuilder<T> {
  +_inner: Query;
  constructor(): this;
  setMaxQueryPayment(amount: Tinybar | Hbar): this;
  setQueryPayment(amount: Tinybar | Hbar): this;

  /**
   * Set a manually created and signed
   * `CryptoTransferTransaction` as the query payment.
   */
  setQueryPaymentTransaction(
    transaction: $PropertyType<$Exports<"./Transaction">, "Transaction">
  ): this;
  getCost(client: BaseClient): Promise<Hbar>;
  execute(client: BaseClient): Promise<T>;
  _toProto(): Query;
  _getMethod(): grpc.UnaryMethodDefinition<Query, Response>;
  _getHeader(): QueryHeader;
  _mapResponseHeader(response: Response): ResponseHeader;
  _mapResponse(response: Response): T;
  _doLocalValidate(errors: string[]): void;
  _shouldRetry(status: Status, response: Response): boolean;
  _getDefaultExecuteTimeout(): number;
  _isPaymentRequired(): boolean;
  _generatePaymentTransaction(
    client: BaseClient,
    node: Node,
    amount: Tinybar | Hbar
  ): Promise<this>;
}
