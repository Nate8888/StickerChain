/**
 * Flowtype definitions for Status
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

declare interface Indexed {
  [code: number]: Status;
}
declare export class Status mixins Indexed {
  [code: number]: Status;

  /**
   * The transaction passed the precheck validations.
   */
  static +Ok: Status;

  /**
   * For any error not handled by specific error codes listed below.
   */
  static +InvalidTransaction: Status;

  /**
   * Payer account does not exist.
   */
  static +PayerAccountNotFound: Status;

  /**
   * Node Account provided does not match the node account of the node the transaction was submitted to.
   */
  static +InvalidNodeAccount: Status;

  /**
   * Pre-Check error when TransactionValidStart + transactionValidDuration is less than current consensus time.
   */
  static +TransactionExpired: Status;

  /**
   * Transaction start time is greater than current consensus time
   */
  static +InvalidTransactionStart: Status;

  /**
   * Valid transaction duration is a positive non zero number that does not exceed 120 seconds
   */
  static +InvalidTransactionDuration: Status;

  /**
   * The transaction signature is not valid
   */
  static +InvalidSignature: Status;

  /**
   * Transaction memo size exceeded 100 bytes
   */
  static +MemoTooLong: Status;

  /**
   * The fee provided in the transaction is insufficient for this type of transaction
   */
  static +InsufficientTxFee: Status;

  /**
   * The payer account has insufficient cryptocurrency to pay the transaction fee
   */
  static +InsufficientPayerBalance: Status;

  /**
   * This transaction ID is a duplicate of one that was submitted to this node or reached consensus in the last 180 seconds (receipt period)
   */
  static +DuplicateTransaction: Status;

  /**
   * If API is throttled out
   */
  static +Busy: Status;

  /**
   * The API is not currently supported
   */
  static +NotSupported: Status;

  /**
   * The file id is invalid or does not exist
   */
  static +InvalidFileId: Status;

  /**
   * The account id is invalid or does not exist
   */
  static +InvalidAccountId: Status;

  /**
   * The contract id is invalid or does not exist
   */
  static +InvalidContractId: Status;

  /**
   * Transaction id is not valid
   */
  static +InvalidTransactionId: Status;

  /**
   * Receipt for given transaction id does not exist
   */
  static +ReceiptNotFound: Status;

  /**
   * Record for given transaction id does not exist
   */
  static +RecordNotFound: Status;

  /**
   * The solidity id is invalid or entity with this solidity id does not exist
   */
  static +InvalidSolidityId: Status;

  /**
   * Transaction hasn't yet reached consensus, or has already expired
   */
  static +Unknown: Status;

  /**
   * The transaction succeeded
   */
  static +Success: Status;

  /**
   * There was a system error and the transaction failed because of invalid request parameters.
   */
  static +FailInvalid: Status;

  /**
   * There was a system error while performing fee calculation, reserved for future.
   */
  static +FailFee: Status;

  /**
   * There was a system error while performing balance checks, reserved for future.
   */
  static +FailBalance: Status;

  /**
   * Key not provided in the transaction body
   */
  static +KeyRequired: Status;

  /**
   * Unsupported algorithm/encoding used for keys in the transaction
   */
  static +BadEncoding: Status;

  /**
   * When the account balance is not sufficient for the transfer
   */
  static +InsufficientAccountBalance: Status;

  /**
   * During an update transaction when the system is not able to find the Users Solidity address
   */
  static +InvalidSolidityAddress: Status;

  /**
   * Not enough gas was supplied to execute transaction
   */
  static +InsufficientGas: Status;

  /**
   * Contract byte code size is over the limit
   */
  static +ContractSizeLimitExceeded: Status;

  /**
   * local execution (query) is requested for a function which changes state
   */
  static +LocalCallModificationException: Status;

  /**
   * Contract REVERT OPCODE executed
   */
  static +ContractRevertExecuted: Status;

  /**
   * For any contract execution related error not handled by specific error codes listed above.
   */
  static +ContractExecutionException: Status;

  /**
   * In Query validation, account with +ve(amount) value should be Receiving node account,
   * the receiver account should be only one account in the list
   */
  static +InvalidReceivingNodeAccount: Status;

  /**
   * Header is missing in Query request
   */
  static +MissingQueryHeader: Status;

  /**
   * The update of the account failed
   */
  static +AccountUpdateFailed: Status;

  /**
   * Provided key encoding was not supported by the system
   */
  static +InvalidKeyEncoding: Status;

  /**
   * Null solidity address
   */
  static +NullSolidityAddress: Status;

  /**
   * Update of the contract failed
   */
  static +ContractUpdateFailed: Status;

  /**
   * The query header is invalid
   */
  static +InvalidQueryHeader: Status;

  /**
   * Invalid fee submitted
   */
  static +InvalidFeeSubmitted: Status;

  /**
   * Payer signature is invalid
   */
  static +InvalidPayerSignature: Status;

  /**
   * The keys were not provided in the request.
   */
  static +KeyNotProvided: Status;

  /**
   * Expiration time provided in the transaction was invalid.
   */
  static +InvalidExpirationTime: Status;

  /**
   * WriteAccess Control Keys are not provided for the file
   */
  static +NoWaclKey: Status;

  /**
   * The contents of file are provided as empty.
   */
  static +FileContentEmpty: Status;

  /**
   * The crypto transfer credit and debit do not sum equal to 0
   */
  static +InvalidAccountAmounts: Status;

  /**
   * Transaction body provided is empty
   */
  static +EmptyTransactionBody: Status;

  /**
   * Invalid transaction body provided
   */
  static +InvalidTransactionBody: Status;

  /**
   * The type of key (base ed25519 key, KeyList, or ThresholdKey) does not match the type of
   * signature (base ed25519 signature, SignatureList, or ThresholdKeySignature).
   */
  static +InvalidSignatureTypeMismatchingKey: Status;

  /**
   * The number of key (KeyList, or ThresholdKey) does not match that of signature
   * (SignatureList, or ThresholdKeySignature). e.g. if a keyList has 3 base keys,
   * then the corresponding signatureList should also have 3 base signatures.
   */
  static +InvalidSignatureCountMismatchingKey: Status;

  /**
   * The claim body is empty.
   */
  static +EmptyClaimBody: Status;

  /**
   * The hash for the claim is empty
   */
  static +EmptyClaimHash: Status;

  /**
   * The key list is empty
   */
  static +EmptyClaimKeys: Status;

  /**
   * The size of the claim hash is not 48 bytes
   */
  static +InvalidClaimHashSize: Status;

  /**
   * The query body is empty
   */
  static +EmptyQueryBody: Status;

  /**
   * The crypto claim query is empty
   */
  static +EmptyClaimQuery: Status;

  /**
   * The crypto claim doesn't exists in the file system. It expired or was never persisted.
   */
  static +ClaimNotFound: Status;

  /**
   * The account id passed has not yet been created.
   */
  static +AccountIdDoesNotExist: Status;

  /**
   * The claim hash already exists
   */
  static +ClaimAlreadyExists: Status;

  /**
   * File WACL keys are invalid
   */
  static +InvalidFileWacl: Status;

  /**
   * Serialization failure
   */
  static +SerializationFailed: Status;

  /**
   * The size of the Transaction is greater than transactionMaxBytes
   */
  static +TransactionOversize: Status;

  /**
   * The Transaction has more than 50 levels
   */
  static +TransactionTooManyLayers: Status;

  /**
   * Contract is marked as deleted
   */
  static +ContractDeleted: Status;

  /**
   * The platform node is either disconnected or lagging behind.
   */
  static +PlatformNotActive: Status;

  /**
   * One public key matches more than one prefixes on the signature map.
   */
  static +KeyPrefixMismatch: Status;

  /**
   * Transaction not created by platform due to either large backlog or
   * message size exceeded transactionMaxBytes.
   */
  static +PlatformTransactionNotCreated: Status;

  /**
   * Auto renewal period is not a positive number of seconds.
   */
  static +InvalidRenewalPeriod: Status;

  /**
   * The response code when a smart contract id is passed for a crypto API request.
   */
  static +InvalidPayerAccountId: Status;

  /**
   * The account has been marked as deleted.
   */
  static +AccountDeleted: Status;

  /**
   * The file has been marked as deleted.
   */
  static +FileDeleted: Status;

  /**
   * Same accounts repeated in the transfer account list.
   */
  static +AccountRepeatedInAccountAmounts: Status;

  /**
   * Attempting to set negative balance value for crypto account.
   */
  static +SettingNegativeAccountBalance: Status;

  /**
   * When deleting smart contract that has crypto balance either transfer account or transfer.
   * smart contract is required.
   */
  static +ObtainerRequired: Status;

  /**
   * When deleting smart contract that has crypto balance you can not use the same contract id
   * as transferContractId as the one being deleted.
   */
  static +ObtainerSameContractId: Status;

  /**
   * TransferAccountId or transferContractId specified for contract delete does not exist.
   */
  static +ObtainerDoesNotExist: Status;

  /**
   * Attempting to modify (update or delete a immutable smart contract,
   * i.e. one created without a admin key).
   */
  static +ModifyingImmutableContract: Status;

  /**
   * Unexpected exception thrown by file system functions.
   */
  static +FileSystemException: Status;

  /**
   * The duration is not a subset of [MINIMUM_AUTORENEW_DURATION,MAXIMUM_AUTORENEW_DURATION].
   */
  static +AutorenewDurationNotInRange: Status;

  /**
   * Decoding the smart contract binary to a byte array failed.
   * Check that the input is a valid hex string.
   */
  static +ErrorDecodingBytestring: Status;

  /**
   * File to create a smart contract was of length zero.
   */
  static +ContractFileEmpty: Status;

  /**
   * Bytecode for smart contract is of length zero.
   */
  static +ContractBytecodeEmpty: Status;

  /**
   * Attempt to set negative initial balance.
   */
  static +InvalidInitialBalance: Status;

  /**
   * Attempt to set negative receive record threshold.
   */
  static +InvalidReceiveRecordThreshold: Status;

  /**
   * Attempt to set negative send record threshold.
   */
  static +InvalidSendRecordThreshold: Status;

  /**
   * Special Account Operations should be performed by only Genesis account, return this code if it is not Genesis Account
   */
  static +AccountIsNotGenesisAccount: Status;

  /**
   * The fee payer account doesn't have permission to submit such Transaction
   */
  static +PayerAccountUnauthorized: Status;

  /**
   * FreezeTransactionBody is invalid
   */
  static +InvalidFreezeTransactionBody: Status;

  /**
   * FreezeTransactionBody does not exist
   */
  static +FreezeTransactionBodyNotFound: Status;

  /**
   * Exceeded the number of accounts (both from and to) allowed for crypto transfer list.
   */
  static +TransferListSizeLimitExceeded: Status;

  /**
   * Smart contract result size greater than specified maxResultSize.
   */
  static +ResultSizeLimitExceeded: Status;

  /**
   * The payer account is not a special account(account 0.0.55).
   */
  static +NotSpecialAccount: Status;

  /**
   * Negative gas was offered in smart contract call.
   */
  static +ContractNegativeGas: Status;

  /**
   * Negative value / initial balance was specified in a smart contract call / create.
   */
  static +ContractNegativeValue: Status;

  /**
   * Failed to update fee file.
   */
  static +InvalidFeeFile: Status;

  /**
   * Failed to update exchange rate file.
   */
  static +InvalidExchangeRateFile: Status;

  /**
   * Payment tendered for contract local call cannot cover both the fee and the gas.
   */
  static +InsufficientLocalCallGas: Status;

  /**
   * Entities with Entity ID below 1000 are not allowed to be deleted.
   */
  static +EntityNotAllowedToDelete: Status;

  /**
   * Violating one of these rules: 1) treasury account can update all entities below 0.0.1000, 2)
   * account 0.0.50 can update all entities from 0.0.51 - 0.0.80, 3) Network Function Master
   * Account A/c 0.0.50 - Update all Network Function accounts & perform all the Network Functions
   * listed below, 4) Network Function Accounts: i) A/c 0.0.55 - Update Address Book files
   * (0.0.101/102), ii) A/c 0.0.56 - Update Fee schedule (0.0.111), iii) A/c 0.0.57 -
   * Update Exchange Rate (0.0.112).
   */
  static +AuthorizationFailed: Status;

  /**
   * Fee Schedule Proto uploaded but not valid (append or update is required).
   */
  static +FileUploadedProtoInvalid: Status;

  /**
   * Fee Schedule Proto uploaded but not valid (append or update is required).
   */
  static +FileUploadedProtoNotSavedToDisk: Status;

  /**
   * Fee Schedule Proto File Part uploaded.
   */
  static +FeeScheduleFilePartUploaded: Status;

  /**
   * The change on Exchange Rate exceeds Exchange_Rate_Allowed_Percentage.
   */
  static +ExchangeRateChangeLimitExceeded: Status;

  /**
   * Contract permanent storage exceeded the currently allowable limit
   */
  static +MaxContractStorageExceeded: Status;

  /**
   * Transfer Account should not be same as Account to be deleted
   */
  static +TransferAccountSameAsDeleteAccount: Status;
  static +TotalLedgerBalanceInvalid: Status;

  /**
   * The expiration date/time on a smart contract may not be reduced.
   */
  static +ExpirationReductionNotAllowed: Status;

  /**
   * The Topic ID specified is not in the system.
   */
  static +InvalidTopicId: Status;

  /**
   * Deprecated and to be removed before HCS release.
   */
  static +TopicDeleted: Status;

  /**
   * Deprecated and to be removed before HCS release.
   */
  static +TopicNotEnabled: Status;

  /**
   * Deprecated and to be removed before HCS release.
   */
  static +InvalidTopicValidStartTime: Status;
  static +InvalidTopicExpirationTime: Status;
  static +InvalidAdminKey: Status;
  static +InvalidSubmitKey: Status;

  /**
   * An attempted operation was not authorized (ie - a deleteTopic for a topic with no adminKey).
   */
  static +Unauthorized: Status;

  /**
   * A ConsensusService message is empty.
   */
  static +InvalidTopicMessage: Status;

  /**
   * The autoRenewAccount specified is not a valid, active account.
   */
  static +InvalidAutorenewAccount: Status;

  /**
   * An admin key was not specified on the topic, so there must not be an autorenew account.
   */
  static +AutoRenewAccountNotAllowed: Status;

  /**
   * The autoRenewAccount didn't sign the transaction.
   */
  static +AutoRenewAccountSignatureMissing: Status;

  /**
   * The topic has expired, was not automatically renewed, and is in a 7 day grace period before
   * the topic will be deleted unrecoverably. This error response code will not be returned
   * until autoRenew functionality is supported by HAPI.
   */
  static +TopicExpired: Status;

  /**
   * Deprecated and to be removed before HCS release.
   */
  static +TOPIC_DELETED: Status;
  +code: number;
  constructor(code: number): this;
  toString(): string;
  _isBusy(): boolean;
  static _fromCode(code: number): Status;
  _isError(): boolean;
  _throwIfError(): void;
}
declare export {};
