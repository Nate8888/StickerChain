/**
 * Flowtype definitions for Hbar
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import BigNumber from "bignumber.js";
import { HbarUnit } from "./HbarUnit";
import { UInt64Value } from "google-protobuf/google/protobuf/wrappers_pb";
export type Tinybar = BigNumber.Value;
declare var hbarTinybar: Symbol;
declare export var hbarToProto: Symbol;
declare export var hbarToProtoValue: Symbol;
declare export var hbarCheck: Symbol;
/**
 * Typesafe wrapper for values of HBAR providing foolproof conversions to other denominations.
 */
declare export class Hbar {
  constructor(amount: BigNumber.Value): this;
  static +MAX: Hbar;
  static +MIN: Hbar;
  static +ZERO: Hbar;

  /**
   * Calculate the HBAR amount given a raw value and a unit.
   */
  static from(amount: BigNumber.Value, unit: HbarUnit): Hbar;

  /**
   * Get HBAR from a tinybar amount, may be a string
   */
  static fromTinybar(amount: Tinybar): Hbar;

  /**
   * Wrap a raw value of HBAR, may be a string.
   * @deprecate Use constructor instead. `new Hbar(amount)`
   */
  static of(amount: BigNumber.Value): Hbar;
  static zero(): Hbar;
  toString(): string;
  value(): BigNumber;
  asTinybar(): BigNumber;
  as(unit: HbarUnit): BigNumber;
  multipliedBy(amount: BigNumber.Value): Hbar;
  plus(hbar: Hbar): Hbar;
  plus(amount: BigNumber.Value, unit: HbarUnit): Hbar;
  minus(hbar: Hbar): Hbar;
  minus(amount: BigNumber.Value, unit: HbarUnit): Hbar;
  isEqualTo(hbar: Hbar): boolean;
  isEqualTo(amount: BigNumber.Value, unit: HbarUnit): boolean;
  isGreaterThan(hbar: Hbar): boolean;
  isGreaterThan(amount: BigNumber.Value, unit: HbarUnit): boolean;
  isGreaterThanOrEqualTo(hbar: Hbar): boolean;
  isGreaterThanOrEqualTo(amount: BigNumber.Value, unit: HbarUnit): boolean;
  isLessThan(hbar: Hbar): boolean;
  isLessThan(amount: BigNumber.Value, unit: HbarUnit): boolean;
  isLessThanOrEqualTo(hbar: Hbar): boolean;
  isLessThanOrEqualTo(amount: BigNumber.Value, unit: HbarUnit): boolean;
  comparedTo(hbar: Hbar): number;
  comparedTo(amount: BigNumber.Value, unit: HbarUnit): number;
  isZero(): boolean;
  negated(): Hbar;
  isNegative(): boolean;
  isPositive(): boolean;
  [typeof hbarCheck]: (x: {
    allowNegative: boolean,
    ...
  }) => void;
  [typeof hbarToProto]: () => string;
  [typeof hbarToProtoValue]: () => UInt64Value;
}
declare export function hbarFromTinybarOrHbar(number: Hbar | Tinybar): Hbar;
declare export {};
